name: Deploy to Amazon ECS
 
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. jdk 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: '21'

      # 3. application.yml 파일 생성
      - name: Create application.yml
        run: |
          touch ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      # 4. 도커 빌드 환경 설정 (buildx 설치)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      #5. AWS 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Set short git commit SHA
        id: vars
        run: |
          shortSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$shortSha"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: ${{ steps.vars.outputs.short_sha }}
        run: |
          # 하드코딩된 ECR 저장소 이름: ${{ secrets.AWS_ECR_NAME }}
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_ECR_NAME }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ secrets.AWS_ECR_NAME }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.AWS_ECR_NAME }}:latest
          docker push $ECR_REGISTRY/${{ secrets.AWS_ECR_NAME }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.AWS_ECR_NAME }}:latest
          echo "::set-output name=image::$ECR_REGISTRY/${{ secrets.AWS_ECR_NAME }}:$IMAGE_TAG"

      - name: Retrieve current ECS task definition JSON file
        id: retrieve-task-def
        run: |
          TASK_DEF_NAME="intelliviewTask"
          aws ecs describe-task-definition --task-definition $TASK_DEF_NAME --query taskDefinition > task-definition.json
          cat task-definition.json
          echo "::set-output name=task_def_file::task-definition.json"

      - name: Render updated task definition with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.retrieve-task-def.outputs.task_def_file }}
          container-name: "intelliview-server"
          image: ${{ steps.build-image.outputs.image }}

      - name: Clean task definition (remove enableFaultInjection)
        id: clean-task-def
        run: |
          jq 'del(.enableFaultInjection)' ${{ steps.render-task-def.outputs.task-definition }} > cleaned-task-def.json
          cat cleaned-task-def.json
          echo "::set-output name=clean_task_def::cleaned-task-def.json"

      - name: Deploy updated task definition to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.clean-task-def.outputs.clean_task_def }}
          service: "intelliviewTask-service"
          cluster: "intelliview-ecs"
          wait-for-service-stability: true
